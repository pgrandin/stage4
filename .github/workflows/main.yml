name: Build
on:
  push:
    branches:
      - yaml
  pull_request:
    branches:
      - yaml

jobs:
  build:
    runs-on: [self-hosted]
    strategy:
      matrix:
        target: [XPS-9700]
      fail-fast: false
    env:
      target: ${{ matrix.target }}
      stage4_fs: "./stage4"
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Prepare Build Environment
      run: |
        apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends xz-utils python3-jinja2 rsync wget
        wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/local/bin/yq
        chmod +x /usr/local/bin/yq

    - name: Prepare stage3
      run: |
        cd /dl/
        BASEURL="http://distfiles.gentoo.org/releases/amd64/autobuilds/current-stage3-amd64-openrc/"
        STAGE3=$(wget -q -O - ${BASEURL} | grep -oP 'href="stage3-amd64-openrc-\d+T\d+Z\.tar\.xz"' | cut -d '"' -f 2 | head -n 1)

        wget -nvc ${BASEURL}/$STAGE3
        [ -f ${STAGE3} ] && rm -f ${STAGE3%.*}
        mkdir -p ${stage4_fs}
        unxz -k $STAGE3 && tar xpf ${STAGE3%.*} -C ${stage4_fs}

    - name: Prepare configs
      run: |
        # Path to the config.yml file
        CONFIG_FILE="config.yml"

        # Path to the Jinja2 template
        TEMPLATE_FILE="make.conf.j2"

        # Extract keys (hostnames) from the YAML file
        # The following command gets the top-level keys in the YAML file
        KEYS=$(yq e '. | keys | .[]' "${CONFIG_FILE}")

        # Iterate over each key and process it
        for key in ${KEYS}; do
            if [[ "${key}" != "null" && ! -z "${key}" ]]; then
                # Generate temporary YAML file for the current key
                TEMP_YAML_FILE="temp_${key}.yml"
                yq e ".${key}" "${CONFIG_FILE}" > "${TEMP_YAML_FILE}"

                # Define the output file path
                OUTPUT_FILE="files/${key}/etc/portage/make.conf"

                # Ensure the output directory exists
                mkdir -p "$(dirname "${OUTPUT_FILE}")"

                # Run j2 using the temporary YAML file
                jinja2 "${TEMPLATE_FILE}" "${TEMP_YAML_FILE}" > "${OUTPUT_FILE}"

                echo "Generated configuration for ${key} in ${OUTPUT_FILE}"

                # Clean up the temporary file
                rm -f "${TEMP_YAML_FILE}"
            fi
        done

    - name: Prepare chroot
      run: |
        mount -t proc /proc ${stage4_fs}/proc
        mount --rbind /dev ${stage4_fs}/dev
        mount -t tmpfs tmpfs ${stage4_fs}/var/tmp
        mount -t tmpfs tmpfs ${stage4_fs}/var/cache


        rsync -vrtza files/common/ ${stage4_fs}/
        rsync -vrtza files/${target}/ ${stage4_fs}/

        cp step2.sh ${stage4_fs}/
        yq eval ".[\"$target\"]" ${stage4_fs}/config.yml


    - name: umount chroot
      if: always()
      run: |
        umount ${stage4_fs}/proc
        umount ${stage4_fs}/dev
        umount ${stage4_fs}/var/tmp
        umount ${stage4_fs}/var/cache
