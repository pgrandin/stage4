version: 2.1

image: &image
    docker:
      - image: pgrandin/stage4-ci:latest
    environment:
      FEATURES: "-sandbox -usersandbox"

setup_env: &setup_env
    name: Prepare env
    command: |
      git clone https://github.com/pgrandin/stage4.git /root/project/
      cd /root/project
      git checkout ${CIRCLE_BRANCH}
      rsync -vrtza files/<< parameters.target >>/ /

      echo "rsync -vrtza ubuntu@packages.kazer.org:/packages//binpkgs/ /var/cache/binpkgs/ -e \"ssh -o StrictHostKeyChecking=no\""
      rsync -vrtza ubuntu@packages.kazer.org:/packages/<< parameters.target >>/binpkgs/ /var/cache/binpkgs/ -e "ssh -o StrictHostKeyChecking=no"
      emaint binhost --fix

upload_packages: &upload_packages
    name: Upload packages
    command: |
      mv /var/cache/binpkgs /tmp/
      rsync -vrtza ubuntu@packages.kazer.org:/packages/<< parameters.target >>/ /var/cache/ -e "ssh -o StrictHostKeyChecking=no"
      rsync -vrtza /tmp/binpkgs/ /var/cache/binpkgs/ && rm -rf /tmp/binpkgs/
      echo "Regenerating index"
      eclean packages
      emaint binhost --fix
      rsync -vrtza --delete /var/cache/binpkgs -e "ssh -o StrictHostKeyChecking=no" ubuntu@packages.kazer.org:/packages/<< parameters.target >>/

prepare_kernel_config: &prepare_kernel_config
    name: Prepare kernel config
    command: |
      git clone https://github.com/pgrandin/kernel-configs.git /tmp/kernel-configs-master/
      pushd /tmp/kernel-configs-master/
      kconfig_sha=$(git rev-parse HEAD)
      popd

      kversion=$(eix gentoo-source|awk -F'[()]' '/ [~]5.10/ {version=$2} END{print version}')
      echo "${kversion}-${kconfig_sha}" > kernel-config.txt

jobs:
  emerge_sync:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - run:
         name: Prepare env
         command: |
           git clone https://github.com/pgrandin/stage4.git ~/project/
           cd ~/project
           git checkout docker
      - run:
         name: build docker image
         command: |
           if docker pull pgrandin/stage4-ci:`date +'%Y%m%d'`; then
            echo "Image pgrandin/stage4-ci:`date +'%Y%m%d'` already exist, skipping build"
           else
            cd ~/project/dockr
            docker build --no-cache=true --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') . -t pgrandin/stage4-ci:`date +'%Y%m%d'`
            docker login -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
            docker push pgrandin/stage4-ci:`date +'%Y%m%d'`
            docker tag pgrandin/stage4-ci:`date +'%Y%m%d'` pgrandin/stage4-ci:latest
            docker push pgrandin/stage4-ci:latest
           fi

  synchronize_steps:
    <<: *image
    parameters:
      target:
        type: string
    steps:
      - run: *upload_packages

  update_remote_index:
    <<: *image
    parameters:
      target:
        type: string
    steps:
      - run: *upload_packages

  build_kernel:
    <<: *image
    parameters:
      target:
        type: string
    steps:
      - run: *setup_env
      - run: *prepare_kernel_config
      - restore_cache:
          key: kernel-v1-{{ checksum "kernel-config.txt" }}
      - run:
          name: Build kernel
          command: |
            kversion=$(eix gentoo-source|awk -F'[()]' '/ [~]5.10/ {version=$2} END{print version}')

            if [[ -e "/usr/src/linux-${kversion}-gentoo/arch/x86_64/boot/bzImage" ]]; then
              echo "Found kernel from cache, skipping compilation"
            else
              mkdir /etc/portage/package.keywords/
              echo "=sys-kernel/gentoo-sources-$kversion ~amd64" > /etc/portage/package.keywords/gentoo-sources
              MAKEOPTS="-j$(nproc)" FEATURES="-getbinpkg" emerge -q =gentoo-sources-$kversion

              cd /usr/src/linux
              cat arch/x86/configs/x86_64_defconfig /tmp/kernel-configs-master/common_defconfig > arch/x86/configs/<< parameters.target >>_defconfig

              confs=$(cat /root/project/config.json | jq --arg HOST target -r '.configs[] | select (.["host"]==$HOST) | .kernel_configs |.[]' )
              for conf in $confs; do
                  cat /tmp/kernel-configs-master/${conf}_defconfig >> arch/x86/configs/<< parameters.target >>_defconfig
              done
              cat /tmp/kernel-configs-master/${target}_defconfig >> arch/x86/configs/<< parameters.target >>_defconfig
              make defconfig << parameters.target >>_defconfig
              make -j$(nproc)
            fi
      - save_cache:
          paths:
            - /usr/src/
          key: kernel-v1-{{ checksum "kernel-config.txt" }}

  build_package_oneshot:
    <<: *image
    parameters:
      package:
        type: string
      target:
        type: string
    steps:
      - run: *setup_env
      - run:
          name: Build one package
          command: |
            package="<< parameters.package >>*"
            atom="${package/\*-/:}"
            atom="${atom/\*/}"
            atom="${atom/\./}"
            category=$(echo $package | cut -d'/' -f1)
            echo "$package -> $atom -> $category"

            MAKEOPTS="-j3" emerge -1 --load-average=18.0 ${atom}
            rsync -vrtza /var/cache/binpkgs/ -e "ssh -o StrictHostKeyChecking=no" ubuntu@packages.kazer.org:/packages/<< parameters.target >>/binpkgs/ --exclude Packages

  build_package:
    <<: *image
    parameters:
      target:
        type: string
      package:
        type: string
    steps:
      - run: *setup_env
      - run:
          name: Build deps for << parameters.package >>
          command: |
            if [ $(grep << parameters.package >> /var/lib/portage/world) ]; then
              perl-cleaner --reallyall
              env -u target MAKEOPTS="-j4" emerge -NDuqo << parameters.package >>
            else
              echo "Package << parameters.package >> not in world file, skipping"
            fi
          no_output_timeout: 90m
      - run: *upload_packages
      - run:
          name: Build package for << parameters.package >>
          command: |
            if [ $(grep << parameters.package >> /var/lib/portage/world) ]; then
              env -u target MAKEOPTS="-j4" emerge -NDuq << parameters.package >>
            else
              echo "Package << parameters.package >> not in world file, skipping"
            fi
          no_output_timeout: 90m
      - run: *upload_packages

  build_system:
    <<: *image
    parameters:
      target:
        type: string
    steps:
      - run: *setup_env
      - run: *prepare_kernel_config
      - restore_cache:
          key: kernel-v1-{{ checksum "kernel-config.txt" }}
      - run:
          name: Build @system
          command: |
            emerge -uq libudev # for elogind
            MAKEOPTS="-j$(nproc)" emerge -NDuq @system --jobs $(nproc)
          no_output_timeout: 90m
      - run: *upload_packages

  build_world:
    <<: *image
    parameters:
      target:
        type: string
    steps:
      - run: *setup_env
      - run: *prepare_kernel_config
      - restore_cache:
          key: kernel-v1-{{ checksum "kernel-config.txt" }}
      - run:
          name: Build @world
          command: |
            perl-cleaner --reallyall
            MAKEOPTS="-j4" emerge -NDuq @world
          no_output_timeout: 90m
      - run: *upload_packages

  perl_cleanup:
    <<: *image
    parameters:
      target:
        type: string
    steps:
      - run: *setup_env
      - run:
          name: Clean up perl installation
          command: |
            emerge -q1 dev-lang/perl
            FEATURES="-getbinpkg" emerge -q1 XML-Parser
            perl-cleaner --reallyall
      - run: *upload_packages


workflow_jobs: &workflow_jobs
    jobs:
      - emerge_sync
      - update_remote_index:
          requires:
            - emerge_sync
          matrix:
            alias: index
            parameters:
              target: ["Z390", "R710"]
      - build_kernel:
          requires:
            - update_remote_index-<< matrix.target >>
          matrix:
            alias: kernel
            parameters:
              target: ["Z390", "R710"]
      - build_package_oneshot:
          name: pre-<< matrix.package >>-<< matrix.target >>
          requires:
            - update_remote_index-<< matrix.target >>
          matrix:
            alias: pre-
            parameters:
              package: ["sys-devel/clang*-10.", "sys-devel/clang*-11.", "dev-util/cmake", "dev-lang/rust", "net-libs/nodejs", "dev-libs/boost", "sys-devel/gcc", "sys-devel/binutils"]
              target: ["Z390", "R710"]
            exclude:
              - R710: dev-lang/rust
              - R710: net-libs/nodejs
      - synchronize_steps:
          name: sync-<< matrix.target >>
          requires:
            - pre-dev-lang/rust-<< matrix.target >>
            - pre-net-libs/nodejs-<< matrix.target >>
            - pre-dev-libs/boost-<< matrix.target >>
            - pre-sys-devel/clang*-10.-<< matrix.target >>
            - pre-sys-devel/clang*-11.-<< matrix.target >>
            - pre-sys-devel/gcc-<< matrix.target >>
            - pre-sys-devel/binutils-<< matrix.target >>
            - pre-dev-util/cmake-<< matrix.target >>
          matrix:
            alias: sync-
            parameters:
              target: ["Z390", "R710"]
      - build_system:
          requires:
            - build_kernel-<< matrix.target >>
            - sync-<< matrix.target >>
          matrix:
            alias: build_system
            parameters:
              target: ["Z390", "R710"]
      - build_package:
          name: build-<< matrix.package >>-<< matrix.target >>
          requires:
            - build_system-<< matrix.target >>
          matrix:
            alias: deps-
            parameters:
              package: ["www-client/firefox", "www-client/chromium", "app-emulation/virt-manager", "dev-util/pycharm-community"]
              target: ["Z390", "R710"]
      - build_world:
          requires:
            - build-www-client/firefox-<< matrix.target >>
            - build-www-client/chromium-<< matrix.target >>
            - build-app-emulation/virt-manager-<< matrix.target >>
            - build-dev-util/pycharm-community-<< matrix.target >>
          matrix:
            alias: world-
            parameters:
              target: ["Z390", "R710"]

workflows:
  version: 2
  main:
    <<: *workflow_jobs
  nightly:
    triggers:
      - schedule:
          cron: "32 13 * * *"
          filters:
            branches:
              only:
                - config_based
    <<: *workflow_jobs
